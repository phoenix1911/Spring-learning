<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.2.xsd"
>
	<!--配置基础bean-->
	<bean name="user1" class="ioc.life.Life_User" init-method="init" destroy-method="destroy" lazy-init="true" scope="prototype">
		<property name="id" value="105"/>
		<property name="name" value="张三"/>
	</bean>
	<!--起别名-->
	<alias name="user1" alias="user1_1"/>
	<alias name="user1" alias="user1_2"/>





	<!-- 
		spring容器管理的对象的生命周期:
		
		单例管理的对象:
		1.默认情况下,spring在读取xml文件的时候,就会创建对象。
		2.在创建的对象的时候(先调用构造器),会去调用init-method=".."
		属性值中所指定的方法.
		3.对象在被销毁的时候,会调用destroy-method="..."属性值中
		所指定的方法.(例如调用container.destroy()方法的时候)
		4.lazy-init="true",可以让这个对象在第一次被访问的时候创建
		
		非单例管理的对象:
		1.spring读取xml文件的时候,不会创建对象.
		2.在每一次访问这个对象的时候,spring容器都会创建这个对象,并且
		调用init-method=".."属性值中所指定的方法.
		3.对象销毁的时候,spring容器不会帮我们调用任何方法,
		因为是非单例,这个类型的对象有很多个,spring容器一旦把
		这个对象交给你之后,就不再管理这个对象了.
		
		注意:一个单例管理的对象中,注入了非单例管理的对象的情况。  	
	-->

	

</beans>